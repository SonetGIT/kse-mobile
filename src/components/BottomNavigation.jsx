import React, {useState, useEffect} from 'react';
import Box from '@mui/material/Box';
import CssBaseline from '@mui/material/CssBaseline';
import BottomNavigation from '@mui/material/BottomNavigation';
import BottomNavigationAction from '@mui/material/BottomNavigationAction';
import Paper from '@mui/material/Paper';
import {GiNewspaper} from 'react-icons/gi';
import {RiMessage2Fill} from 'react-icons/ri';
import { IoArrowRedoCircleOutline } from 'react-icons/io5';
import {RiHome8Fill} from 'react-icons/ri';
import Menu from '@mui/material/Menu';
import MenuItem from '@mui/material/MenuItem';
import {IoIosMail} from 'react-icons/io';
import {IoIosMailUnread} from 'react-icons/io';
import {MdOutgoingMail} from 'react-icons/md';
import { shouldForwardProp } from '@mui/styled-engine';
import SendMessage from './SendMessage.jsx';
import IncomingsMessages from './IncomingsMessages.jsx';
import OutgoingMessages from './OutgoingMessages.jsx';
import Send from '@material-ui/icons/Send';

const messageExamples = [
  {
    primary: 'Brunch this week?',
    secondary: "I'll be in the neighbourhood this week. Let's grab a bite to eat",
    person: '/static/images/avatar/5.jpg',
  },
  {
    primary: 'Birthday Gift',
    secondary: `Do you have a suggestion for a good present for John on his work
      anniversary. I am really confused & would love your thoughts on it.`,
    person: '/static/images/avatar/1.jpg',
  },
  {
    primary: 'Recipe to try',
    secondary: 'I am try out this new BBQ recipe, I think this might be amazing',
    person: '/static/images/avatar/2.jpg',
  },
  {
    primary: 'Yes!',
    secondary: 'I have the tickets to the ReactConf for this year.',
    person: '/static/images/avatar/3.jpg',
  },
  {
    primary: "Doctor's Appointment",
    secondary: 'My appointment for the doctor was rescheduled for next Saturday.',
    person: '/static/images/avatar/4.jpg',
  },
  {
    primary: 'Discussion',
    secondary: `Menus that are generated by the bottom app bar (such as a bottom
      navigation drawer or overflow menu) open as bottom sheets at a higher elevation
      than the bar.`,
    person: '/static/images/avatar/5.jpg',
  },
  {
    primary: 'Summer BBQ',
    secondary: `Who wants to have a cookout this weekend? I just got some furniture
      for my backyard and would love to fire up the grill.`,
    person: '/static/images/avatar/1.jpg',
  },
];

function refreshMessages() {
  const getRandomInt = (max) => Math.floor(Math.random() * Math.floor(max));

  return Array.from(new Array(50)).map(
    () => messageExamples[getRandomInt(messageExamples.length)],
  );
}

export default function FixedBottomNavigation(props) {
  const [value, setValue] = React.useState(0);
  const ref = React.useRef(null);
  const [messages, setMessages] = React.useState(() => refreshMessages());
  const [anchorEl, setAnchorEl] = useState(null)
  const openMenu = Boolean(anchorEl)
  const [showSendMessage, setShowSendMessage] = useState(false)
  const [showOutMessages, setShowOutMessages] = useState(false)
  const [showIncomMessages, setShowIncomMessages] = useState(false)  

  React.useEffect(() => {
    ref.current.ownerDocument.body.scrollTop = 0;
    setMessages(refreshMessages());
  }, [value, setMessages]);

  //ОТКРЫТЬ КОНТЕКСТНОЕ МЕНЮ
  async function handleOpenMenu(event){
    setAnchorEl(event.currentTarget)
    // console.log("DBL BID", event.currentTarget)
  }
  const closeSendMessageForm = () => {
    setShowSendMessage(null)
  }

  //ЗАКРЫТЬ КОНТЕКСТНОЕ МЕНЮ
  const handleCloseMenu = () => {
    setAnchorEl(null)
  }

  //Вызов формы НАПИСАТЬ
  function showSendMessageForm(){
    handleCloseMenu()
    setShowSendMessage(!showSendMessage)
  }

  //ОТКРЫТЬ СПИСОК ВХОДЯЩИХ СООБЩЕНИЙ
  function showIncomMessagesForm(){
    handleCloseMenu()
    setShowIncomMessages(!showIncomMessages)
  }
  //ОТКРЫТЬ СПИСОК ОТПРАВЛЕННЫХ СООБЩЕНИЙ
  function showOutMessagesForm(){
    handleCloseMenu()
    setShowOutMessages(!showOutMessages)
  }  

  //ОТРИСОВКА
  return (
    <Box sx={{ pb: 7 }} ref={ref}>
      <CssBaseline />
      <Paper 
        sx={{ position: 'fixed', bottom: 0, left: 0, right: 0 }} 
        elevation={3}        
        >        
        <BottomNavigation
          showLabels
          value={value}
          onChange={(event, newValue) => {setValue(newValue);}}
          style={{backgroundColor:'#ffd6c9', height:50, borderTopLeftRadius:5, borderTopRightRadius:5}}          
        >
         <BottomNavigationAction 
            label='Главное'
            style={{color:'#dd2c00', fontFamily:'Roboto', fontSize:10}} 
            icon={
              <RiHome8Fill 
                size={14} 
                style={{color:'#dd2c00'}}
              />
            }
          />
          <BottomNavigationAction 
            label='Сообщения'
            style={{color:'#dd2c00', fontFamily:'Roboto'}} 
            icon={
              <IoIosMail
                id='menuNav' 
                size={15} 
                style={{color:'#dd2c00'}}
                onClick={handleOpenMenu}
              />
            }
          />
          <BottomNavigationAction 
            label='Новости'
            style={{color:'#dd2c00', fontFamily:'Roboto'}} 
            icon={
              <GiNewspaper 
                size={14} 
                style={{color:'#dd2c00'}}
              />
            }
          />
          <BottomNavigationAction 
            label='Выйти'
            style={{color:'#dd2c00', fontFamily:'Roboto'}} 
            onClick={() => props.exitSystemClick()}
            icon={
              <IoArrowRedoCircleOutline 
                size={15} 
                style={{color:'#dd2c00'}}
                onClick={() => props.exitSystemClick()}
              />
            }
          />
          <Menu
            id="menu-bids"
            anchorEl={anchorEl}
            open={openMenu}
            onClose={handleCloseMenu}
            MenuListProps={{
              'aria-labelledby': "menuNav",
            }}
          >
          <MenuItem 
            onClick ={()=> showSendMessageForm()}
            style={{fontSize:12, fontFamily:'Roboto'}}>
            <RiMessage2Fill 
              size='15'
              style={{color:'#dd2c00', marginRight:4}}
              onClick ={()=> showSendMessageForm()}
            />
            Написать
          </MenuItem>
          <MenuItem 
            onClick ={()=> showIncomMessagesForm()} 
            style={{fontSize:12, fontFamily:'Roboto'}}>
            <IoIosMailUnread
              size='15'
              style={{color:'#dd2c00', marginRight:4}}
              onClick ={()=> showIncomMessagesForm()}
            />
            Входящие
          </MenuItem>
          <MenuItem 
            onClick ={()=> showOutMessagesForm()}
            style={{fontSize:12, fontFamily:'Roboto'}}>
            <MdOutgoingMail 
              size='15'
              style={{color:'#dd2c00', marginRight:4}}
              onClick ={()=> showOutMessagesForm()}
            />
            Отправленные
          </MenuItem>
        </Menu>
        {showSendMessage === true &&
          <SendMessage
            //VARS
            kseRESTApi={props.kseRESTApi}
            token={props.token}
            userProfile={props.userProfile}
            //FUNCTIONS
            setShowSendMessage={setShowSendMessage}
            getEnumDataByList={props.getEnumDataByList}
            createEnumOptions={props.createEnumOptions}
            callSuccessToast={props.callSuccessToast}
            callErrorToast={props.callErrorToast}
            closeSendMessageForm={closeSendMessageForm}
            showOutMessagesForm={showOutMessagesForm}                     
          />}
        {showIncomMessages === true &&
          <IncomingsMessages
            // VARS
            kseRESTApi={props.kseRESTApi}
            token={props.token}
            userProfile={props.userProfile}
            // FUNCTIONS
            setShowIncomMessages={setShowIncomMessages}
            getEnumDataByList={props.getEnumDataByList}
            createEnumOptions={props.createEnumOptions}
            callSuccessToast={props.callSuccessToast}
            callErrorToast={props.callErrorToast}
          />
        }
        {showOutMessages === true &&
          <OutgoingMessages
            // VARS
            kseRESTApi={props.kseRESTApi}
            token={props.token}
            userProfile={props.userProfile}
            // FUNCTIONS
            setShowOutMessages={setShowOutMessages}
            getEnumDataByList={props.getEnumDataByList}
            createEnumOptions={props.createEnumOptions}
            callSuccessToast={props.callSuccessToast}
            callErrorToast={props.callErrorToast}
          />
        }
        </BottomNavigation>
      </Paper>
    </Box>
  );
}